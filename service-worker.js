const e=location.pathname.split("/").slice(0,-1).join("/"),l=[e+"/_app/immutable/entry/app.DuPREENL.js",e+"/_app/immutable/nodes/0.BWI25TmE.js",e+"/_app/immutable/assets/0.DbDC5WBq.css",e+"/_app/immutable/nodes/1.8xd2Qnk8.js",e+"/_app/immutable/nodes/2.Bdw2N7ko.js",e+"/_app/immutable/nodes/3.B64IgIo7.js",e+"/_app/immutable/nodes/4.CggZ0osr.js",e+"/_app/immutable/assets/4.CJ2YWmw9.css",e+"/_app/immutable/nodes/5.BOhNKCU8.js",e+"/_app/immutable/assets/5.DvhEqLFr.css",e+"/_app/immutable/nodes/6.q2hvhcgB.js",e+"/_app/immutable/chunks/86hmsk0G.js",e+"/_app/immutable/chunks/B2RB5TeL.js",e+"/_app/immutable/chunks/BIYFnzYS.js",e+"/_app/immutable/chunks/BOSBZZph.js",e+"/_app/immutable/chunks/Bbijo58t.js",e+"/_app/immutable/chunks/BfecHv-i.js",e+"/_app/immutable/chunks/BlfYTLpw.js",e+"/_app/immutable/chunks/Bp1yonBe.js",e+"/_app/immutable/chunks/BwYyNQVj.js",e+"/_app/immutable/chunks/CENNA1TF.js",e+"/_app/immutable/chunks/CIe45n2o.js",e+"/_app/immutable/chunks/CQoQAeYi.js",e+"/_app/immutable/chunks/CTsBqZ3i.js",e+"/_app/immutable/chunks/CdW2wo26.js",e+"/_app/immutable/chunks/CiNeUwox.js",e+"/_app/immutable/chunks/DsnmJJEf.js",e+"/_app/immutable/chunks/DuQvw7Am.js",e+"/_app/immutable/chunks/DvLb1K2C.js",e+"/_app/immutable/chunks/DytyakGm.js",e+"/_app/immutable/chunks/Nbjk0067.js",e+"/_app/immutable/chunks/rM3fkrv5.js",e+"/_app/immutable/chunks/wW2WasLs.js",e+"/_app/immutable/entry/start.B8i1uCRz.js"],r=[e+"/favicon.ico",e+"/manifest.json"],o="1754655665245",u=`cache-${o}`,i=[...l,...r];self.addEventListener("install",t=>{console.log("Installing service worker for version ",o),console.log("Assets to cache:",i),t.waitUntil(caches.open(u).then(s=>s.addAll(i)))});self.addEventListener("activate",t=>{async function s(){for(const n of await caches.keys())n!==u&&(console.log("Deleting old cache:",n),await caches.delete(n))}console.log("Activating service worker for version ",o),t.waitUntil(s())});self.addEventListener("fetch",t=>{let s=t;if(s.request.method!=="GET")return;async function n(){const c=new URL(s.request.url),p=await caches.open(u);if(i.includes(c.pathname)){const a=await p.match(c.pathname);if(a)return console.log("Serving from cache:",c.pathname),a}try{const a=fetch(s.request);if(!(a instanceof Response))throw new Error("Network request failed for "+s.request.url);return a.status===200&&p.put(s.request,a.clone()),a}catch(a){const m=await p.match(s.request);if(m)return console.log("Returning resource from cache:",s.request.url),m;throw a}}s.respondWith(n())});
